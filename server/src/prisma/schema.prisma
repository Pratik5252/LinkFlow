// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String?
  googleUid String?  @unique
  createdAt DateTime @default(now())

  urls          Url[]
  verifications UrlVerification[]
}

model Url {
  id               String   @id @default(uuid())
  userId           String
  originalUrl      String
  shortUrl         String?  @unique
  title            String?
  createdAt        DateTime @default(now())
  analyticsEnabled Boolean  @default(false)

  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  visits        Visit[]
  verifications UrlVerification[]

  @@unique([userId, originalUrl])
}

enum VerificationMethod {
  meta
  html
  dns
}

enum VerificationStatus {
  PENDING
  VERIFIED
  FAILED
}

model UrlVerification {
  id            String             @id @default(uuid())
  urlId         String
  userId        String
  method        VerificationMethod
  code          String
  status        VerificationStatus
  verifiedAt    DateTime?
  lastCheckTime DateTime?

  url  Url  @relation(fields: [urlId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Visit {
  id        String   @id @default(uuid())
  urlId     String
  ip        String
  location  Json?
  browser   String
  os        String
  device    String
  timestamp DateTime @default(now())

  url Url @relation(fields: [urlId], references: [id], onDelete: Cascade)
}
